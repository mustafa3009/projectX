#!groovy

@Library('AlbertaUtility') _


def pcfUtil = new org.mastercard.pipeline.utility.PCFUtil(this)
def albertaPCFUtil = new org.mastercard.alberta.AlbertaPCFUtil(this)
def commonUtil = new org.mastercard.alberta.CommonUtil(this)
def emailUtil = new org.mastercard.alberta.EmailUtil(this)
def artifactoryUtil = new org.mastercard.alberta.ArtifactoryUtil(this)
def qaUtil = new org.mastercard.alberta.QAUtil(this)
def caasUtil = new org.mastercard.pipeline.utility.CaaSUtil(this)
def autoscaleUtil = new org.mastercard.pipeline.utility.AutoscaleUtil(this)
def fileUtil = new org.mastercard.pipeline.utility.FileUtil(this)
def keyMap = [:]
def blueGreenDeployer


def currentStage = 0
def startStage = 0
def endStage = 0
def currentGitBranch = ""
def selectedEnvironment = params.Environments

//Constant used in pipeline
final String PARALLEL_EXECUTION = "parallel"
final String SERIAL_EXECUTION = "serial"


pipeline {
    agent { label "DTL-GRADLE" }
    options {
        buildDiscarder(logRotator(numToKeepStr: '20'))
        skipDefaultCheckout()
        timeout(time: 1, unit: 'HOURS')
    }

    environment {
        // Defining global variables. Default values are blank, actual values will be read from pipelineconfig.yml inside project repo.
        APP_HOST_NAME = ""
        PCF_FOUNDATION = ""
        PCF_ORG = ""
        PCF_DEV_SPACE = ""
        PCF_CREDENTIALS = ""
        STASH_CREDENTIALS = ""
        ARTIFACTORY_CREDENTIALS = ""
        SONAR_CREDENTIALS = ""
        INTEGRATION_BRANCH = ""
        SYNAPSE_CLIENT_NAME = ""
        ENTRY_URL = ""
        BUILD_TEST_EXECUTION = ""
    }
    stages {
        stage('Checkout') {
            steps {
                script {

                    commonUtil.echoSteps("Checking Out SCM Repository")

                    //TODO: This block can be removed, once manifest.yml file is packaged with the artifact"
                    if( env.JOB_TYPE == "prod-release" || env.JOB_TYPE == "pre-prod-release" ) {

                        //TODO: Initialize 'bitbucketURL' at job configuration level for Release Pipeline
                        checkout([$class: 'GitSCM', credentialsId: "alberta-stash-credentials", branches: [[name: "${BRANCH_NAME}"]],userRemoteConfigs: [[url: "${bitbucketURL}"]]])
                        env.lastCommitHash = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                    }
                    else {
                        checkout scm
                        stash includes: '**', name: 'workspace'
                    }
                    currentGitBranch = env.BRANCH_NAME
                    env.SCM_CHECKOUT = "PASSED"
                }
            }
        }
        stage('Initialize Environment') {
            steps {
                script {

                    commonUtil.echoSteps("Reading pipelinecofig.yml file")
                    def pipelineConfigData = fileUtil.readPipelineConfig()


                    STASH_CREDENTIALS = pipelineConfigData.pipeline.credentialids.stash
                    ARTIFACTORY_CREDENTIALS = pipelineConfigData.pipeline.credentialids.artifactory
                    SONAR_CREDENTIALS = pipelineConfigData.pipeline.credentialids.sonar
                    SYNAPSE_CLIENT_NAME = pipelineConfigData.pipeline.synapse.clientname
                    INTEGRATION_BRANCH = pipelineConfigData.pipeline.branch.integration
                    ENTRY_URL = pipelineConfigData.pipeline.e2e.entryurl
                    BUILD_TEST_EXECUTION = pipelineConfigData.pipeline.buildtestexecution

                    commonUtil.echoSteps("Current git branch: - ${currentGitBranch}")
                    // TODO: This below vaules right now is for stage environment only. This needs to be made conditional based on environment for which pipeline is getting executed.


                    if( selectedEnvironment == 'pre-prod-release' ) {
                    commonUtil.echoSteps("selected env: - ${selectedEnvironment}")
                    currentGitBranch = ""
                        // For Pre-Prod Release
                        PCF_ORG = pipelineConfigData.pipeline.pcf.preprod.org
                        PCF_FOUNDATION = pipelineConfigData.pipeline.pcf.preprod.foundation
                        PCF_DEV_SPACE = pipelineConfigData.pipeline.pcf.preprod.space
                        PCF_CREDENTIALS = pipelineConfigData.pipeline.pcf.preprod.credid
                    }
                    else if( selectedEnvironment == "prod-release" ) {
                    currentGitBranch = ""
                        // For Prod Release
                        PCF_ORG = pipelineConfigData.pipeline.pcf.prod.org
                        PCF_FOUNDATION = pipelineConfigData.pipeline.pcf.prod.foundation
                        PCF_DEV_SPACE = pipelineConfigData.pipeline.pcf.prod.space
                        PCF_CREDENTIALS = pipelineConfigData.pipeline.pcf.prod.credid
                    }
                    else if ( currentGitBranch == INTEGRATION_BRANCH) {



                        // For Dev Merge Flow
                        PCF_ORG = pipelineConfigData.pipeline.pcf.stage.org
                        PCF_FOUNDATION = pipelineConfigData.pipeline.pcf.stage.foundation
                        PCF_DEV_SPACE = pipelineConfigData.pipeline.pcf.stage.space
                        PCF_CREDENTIALS = pipelineConfigData.pipeline.pcf.stage.credid
                    }
                    else if ( currentGitBranch != INTEGRATION_BRANCH ) {
                        // For PR Flow
                        PCF_ORG = pipelineConfigData.pipeline.pcf.pr.org
                        PCF_FOUNDATION = pipelineConfigData.pipeline.pcf.pr.foundation
                        PCF_DEV_SPACE = pipelineConfigData.pipeline.pcf.pr.space
                        PCF_CREDENTIALS = pipelineConfigData.pipeline.pcf.pr.credid
                    }

                    APP_HOST_NAME = PCF_DEV_SPACE + '-' + pipelineConfigData.pipeline.hostname
                    commonUtil.echoSteps("Reading environments.yml")

                    commonUtil.echoSteps("Inspecting the current configuration parameters...")
                    steps.sh 'pwd'
                    steps.sh 'ls -avlh'
                    steps.sh 'cat environmentsconfig.yml'
                    steps.sh 'cat pipelineconfig.yml'

                    def envConfiguration = fileUtil.readEnvironmentsConfig("./environmentsconfig.yml")

                    //defaulting the environment to PR flow

                    startStage = envConfiguration.pr.start
                    endStage = envConfiguration.pr.end

                    // If the current git branch is develop, then we know that the flow of the pipeline is a merge flow,
                    // else we know it is a PR flow.
                    if (currentGitBranch == INTEGRATION_BRANCH) {
                        startStage = envConfiguration.stage.start
                        endStage = envConfiguration.stage.end

                    }
                    // In the higher environments, we have a manual build process in which we select the environment. Then based on the selected env, we choose the flow
                    if (selectedEnvironment == 'pre-prod-release') {

                        startStage = envConfiguration.preprod.start
                        endStage = envConfiguration.preprod.end
                    } else if (selectedEnvironment == 'prod-release') {

                        startStage = envConfiguration.production.start
                        endStage = envConfiguration.production.end
                    } else if (selectedEnvironment == 'performance') {

                        startStage = envConfiguration.performance.start
                        endStage = envConfiguration.performance.end
                    }

                    commonUtil.echoSteps("Global Envionment Veriables- PCF Foundation: ${PCF_FOUNDATION}, PCF ORG: ${PCF_ORG}, PCF Dev space: ${PCF_DEV_SPACE}, PCF Credential ID: ${PCF_CREDENTIALS},Stash Credential ID: ${STASH_CREDENTIALS}, Artifactory Credential ID: ${ARTIFACTORY_CREDENTIALS}, Sonar Credential ID: ${SONAR_CREDENTIALS}, Stage Branch Name: ${INTEGRATION_BRANCH}, Synapse Client Name: ${SYNAPSE_CLIENT_NAME}, Build and Test execution: ${BUILD_TEST_EXECUTION}")
                }
            }
        }
        stage('Test And Build PR: Parallel') {
            when {
                expression { BUILD_TEST_EXECUTION == PARALLEL_EXECUTION }
            }
            failFast true
            parallel {
                stage('Unit Tests PR: Parallel') {
                    steps {
                        script {
                            stageUnitTest(currentStage, startStage, endStage, commonUtil)
                        }
                    }
                }
                stage('Build PR: Parallel') {
                    steps {
                        script {
                            stageBuild(currentStage, startStage, endStage, commonUtil)
                        }
                    }
                }
            }
        }
        stage('Test And Build PR: Serial') {
            when {
                expression { BUILD_TEST_EXECUTION == SERIAL_EXECUTION }
            }
            steps {
                script {
                    stageBuild(currentStage, startStage, endStage, commonUtil)
                    stageUnitTest(currentStage, startStage, endStage, commonUtil)
                }
            }
        }
        stage('Sonar Qube Static Code Analysis PR') {
            steps {
                script {
                    currentStage = stages.sonarQubeStaticCodeAnalysisPR
                    if (selectStages(currentStage, startStage, endStage)) {
                        commonUtil.echoSteps("Starting SonarQube Static Code Analysis")
                        withCredentials([usernamePassword(
                                credentialsId: SONAR_CREDENTIALS, passwordVariable: 'SONAR_PASSWORD', usernameVariable: 'SONAR_USER')]) {
                            sh "$GRADLE4/bin/gradle --info sonarqube"
                            stash includes: '**', name: 'workspace'
                            env.SONAR_CHECK = "PASSED"
                            commonUtil.echoSteps("SonarQube Static Code Analysis Completed Successfully")
                        }
                    } else {
                        commonUtil.echoSteps("Skipped SonarQube PR")
                    }
                }
            }
        }
        stage('Setup E2E Environment PR') {
            steps {
                script {
                    currentStage = stages.setupE2EEnvironmentPR
                    if (selectStages(currentStage, startStage, endStage)) {
                        commonUtil.echoSteps("Preparing E2E Test Environment")
                        if (currentGitBranch == INTEGRATION_BRANCH) {
                            qaUtil.prepareForE2ETests(this, PCF_CREDENTIALS, ENTRY_URL)
                        } else {
                            qaUtil.prepareForE2ETests(this, PCF_CREDENTIALS)
                        }
                        commonUtil.echoSteps("E2E Test Environmnet Prepared Successfully")
                    } else {
                        commonUtil.echoSteps("Skipped Setup E2E Environment PR")
                    }

                }
            }
        }
        stage('Integration Tests PR') {
            agent { label "DTL-CF-CLI" }
            steps {
                script {
                    currentStage = stages.integrationTestsPR
                    if (selectStages(currentStage, startStage, endStage)) {
                        unstash 'workspace'
                        commonUtil.echoSteps("Starting Integration Tests")

                        //TODO: Need to replease with actual Integration Tests once ready to be applicable for all the applications.
                        def appHostName = "${APP_HOST_NAME}"
                        def appHostNameInt = ""

                        if (env.CHANGE_ID) {
                            appHostNameInt = "${appHostName}-${env.CHANGE_ID}"
                        }
                        else {
                            appHostNameInt = "${appHostName}-${env.BUILD_NUMBER}"
                        }

                        if(env.BRANCH_NAME == 'dev') {
                            env.DURABLE_DATA_SERVICE_URL = "https://${appHostName}.apps.stl.pcfstage00.mastercard.int"
                        } else {
                            env.DURABLE_DATA_SERVICE_URL = "https://${appHostNameInt}.apps.stl.pcfstage00.mastercard.int"
                        }

                        echo "Actual Integration Tests needs to be Included."
                      //  sh "$GRADLE4/bin/gradle integrationTest"

                        commonUtil.echoSteps("Integration Tests Completed Successfully")
                        env.INTEGRATION_TESTS = "PASSED"
                    } else {
                        commonUtil.echoSteps("Skipped Integration Tests PR")
                    }
                }
            }
            post {
                always {
                    echo "Junit Report can be captured when Integration Tests are in Place."
                   // junit 'build/test-results/integrationTest/*.xml'
                }
            }
        }
        stage('Execute E2E Tests PR') {
            steps {
                script {
                    currentStage = stages.executeE2ETestsPR
                    if (selectStages(currentStage, startStage, endStage)) {
                        commonUtil.echoSteps("Executing E2E Tests")
//
//                        //TODO: Need to replace with actual E2E Tests once E2E Tests are ready.
//                        if ( selectedEnvironment == "prod-release" || selectedEnvironment == "pre-prod-release" ) {
//                            qaUtil.executeE2ETests(this, PCF_CREDENTIALS, ENTRY_URL, false)
//                        } else {
//                            qaUtil.executeE2ETests(this, PCF_CREDENTIALS, ENTRY_URL)
//                        }

                        commonUtil.echoSteps("E2E Tests Executed Successfully")
                        env.E2E_TESTS = "PASSED"
                    } else {
                        commonUtil.echoSteps("Skipped ExecuteE2eTests PR")
                    }
                }
            }
        }
        stage('Test And Build Stage: Parallel') {
            when {
                expression { BUILD_TEST_EXECUTION == PARALLEL_EXECUTION }
            }
            failFast true
            parallel {
                stage('Unit Tests Stage: Parallel') {
                    steps {
                        script {
                            stageUnitTest(currentStage, startStage, endStage, commonUtil)
                        }
                    }
                }
                stage('Build Stage: Parallel') {
                    steps {
                        script {
                            stageBuild(currentStage, startStage, endStage, commonUtil)
                        }
                    }
                }
            }
        }
        stage('Test And Build Stage: Serial') {
            when {
                expression { BUILD_TEST_EXECUTION == SERIAL_EXECUTION }
            }
            steps {
                script {
                    stageBuild(currentStage, startStage, endStage, commonUtil)
                    stageUnitTest(currentStage, startStage, endStage, commonUtil)
                }
            }
        }
        stage('Sonar Qube Static Code Analysis Stage') {
            steps {
                script {
                    currentStage = stages.sonarQubeStaticCodeAnalysisStage
                    if (selectStages(currentStage, startStage, endStage)) {
                        commonUtil.echoSteps("Starting SonarQube Static Code Analysis")
                        withCredentials([usernamePassword(
                                credentialsId: SONAR_CREDENTIALS, passwordVariable: 'SONAR_PASSWORD', usernameVariable: 'SONAR_USER')]) {
                            sh "$GRADLE4/bin/gradle --info sonarqube"
                            stash includes: '**', name: 'workspace'
                            env.SONAR_CHECK = "PASSED"
                            commonUtil.echoSteps("SonarQube Static Code Analysis Completed Successfully")
                        }
                    } else {
                        commonUtil.echoSteps("Skipped SonarQube Stage")
                    }
                }
            }
        }
        stage('Publish To Artifactory Stage') {
            steps {
                script {
                    currentStage = stages.publishToArtifactoryStage
                    if (selectStages(currentStage, startStage, endStage)) {
                        commonUtil.echoSteps("Publishing Artifact to Artifactory")
                        artifactoryUtil.artifactoryUpload(this, ARTIFACTORY_CREDENTIALS)
                        commonUtil.echoSteps("Artifact Successfully Published to Artifactory")
                    } else {
                        commonUtil.echoSteps("Skipped artifactory push Stage")
                    }

                }
            }
        }
        stage('Get Certs For Stage') {
            agent { label "DTL-CAAS_CLIENT" }
            steps {
                script {
                    currentStage = stages.getCertsForStage
                    if (selectStages(currentStage, startStage, endStage)) {
                        commonUtil.echoSteps("Fetching certificates from CAAS")
                        unstash 'workspace'
                        caasUtil.getJKSFromCaaS(this, PCF_FOUNDATION, keyMap, SYNAPSE_CLIENT_NAME)
                        commonUtil.echoSteps("Certificates retrieved successfully")
                    } else {
                        commonUtil.echoSteps("Skipped Get Certs")
                    }
                }
            }
        }
        stage('Deploy Green Stage') {
            agent { label "DTL-CF-CLI" }
            steps {
                script {
                    currentStage = stages.deployGreenStage
                    if (selectStages(currentStage, startStage, endStage)) {
                        unstash 'workspace'
                        if ( (selectedEnvironment != "prod-release" && selectedEnvironment != "pre-prod-release") ) {
                            commonUtil.echoSteps("Retrieving Artifact from Artifactory")
                            artifactoryUtil.artifactoryDownload(this, ARTIFACTORY_CREDENTIALS)
                            commonUtil.echoSteps("Artifact Package Successfully Retrieved from Artifactory")

                            sh "cat manifest.yml"
                            commonUtil.echoSteps("Renaming AppHostName in manifest.yml")
                            albertaPCFUtil.renameAppInManifest(APP_HOST_NAME)
                            sh "cat manifest.yml"
                        }

                        commonUtil.echoSteps("Started Getting Environment Variables for Synapse")
                        def envVar = org.mastercard.pipeline.utility.SynapseUtil.getEnvVar(this, keyMap, PCF_FOUNDATION, false)
                        commonUtil.echoSteps("Environment Variables for Synapse Successfully Set in map")
                        blueGreenDeployer = new org.mastercard.pipeline.deploy.BlueGreenDeployer(this, PCF_ORG, PCF_DEV_SPACE, PCF_CREDENTIALS, PCF_FOUNDATION)
                        //Pass custom live route to the method, if required. Default will be "green-<APP_NAME>".
                        blueGreenDeployer.deployGreenApp(null, envVar)
                        commonUtil.echoSteps("Green Application Deployed Successfully")
                        env.DEPLOY_GREEN = "PASSED"
                    } else {
                        commonUtil.echoSteps("Skipped Deploy Green")
                    }
                    artifactoryUtil.artifactoryDownload(this, ARTIFACTORY_CREDENTIALS)
                }
            }
        }
        stage('Integration Tests Stage') {
            agent { label "DTL-CF-CLI" }
            steps {
                script {
                    currentStage = stages.integrationTestsStage
                    if (selectStages(currentStage, startStage, endStage)) {
                        unstash 'workspace'
                        commonUtil.echoSteps("Starting Integration Tests")

                        //TODO: Need to replease with actual Integration Tests once ready to be applicable for all the applications.
                        def appHostName = "${APP_HOST_NAME}"
                        def appHostNameInt = ""

                        if (env.CHANGE_ID) {
                            appHostNameInt = "${appHostName}-${env.CHANGE_ID}"
                        }
                        else {
                            appHostNameInt = "${appHostName}-${env.BUILD_NUMBER}"
                        }

                        if(env.BRANCH_NAME == 'dev') {
                            env.DURABLE_DATA_SERVICE_URL = "https://${appHostName}.apps.stl.pcfstage00.mastercard.int"
                        } else {
                            env.DURABLE_DATA_SERVICE_URL = "https://${appHostNameInt}.apps.stl.pcfstage00.mastercard.int"
                        }

                        echo "Actual Integration Tests needs to be Included."
//                        //sh "$GRADLE4/bin/gradle integrationTest"

                        commonUtil.echoSteps("Integration Tests Completed Successfully")
                        env.INTEGRATION_TESTS = "PASSED"
                    } else {
                        commonUtil.echoSteps("Skipped Integration Tests")
                    }
                }
            }
            post {
                always {
                    echo "Junit Report can be captured when Integration Tests are in Place."
                   // junit 'build/test-results/integrationTest/*.xml'
                }
            }
        }
        stage('Flip Traffic Stage') {
            agent { label "DTL-CF-CLI" }
            steps {
                script {
                    currentStage = stages.flipTrafficStage
                    if (selectStages(currentStage, startStage, endStage)) {
                        commonUtil.echoSteps("Started Flipping Traffic")
                        unstash 'workspace'

                        def map = ['ENABLE_LOCUS_INIT':'true']

                        //Pass custom live route to the method, if required. Default will be "blue-<APP_NAME>"
                        blueGreenDeployer.flipTraffic(null, map)

                        commonUtil.echoSteps("Traffic Successfully Flipped to New Live Application")
                        env.FLIP_TRAFFIC = "PASSED"
                    } else {
                        commonUtil.echoSteps("Skipped Flip Traffic")
                    }
                }
            }
        }
        stage('Autoscale Application Stage') {
            agent { label "DTL-CF-CLI" }
            steps {
                script {
                    currentStage = stages.autoscaleApplicationStage
                    if (selectStages(currentStage, startStage, endStage)) {
                        unstash 'workspace'

                        albertaPCFUtil.renameAppInManifest(APP_HOST_NAME)
                        autoscaleUtil.autoscaleApplication(PCF_ORG, PCF_DEV_SPACE, PCF_CREDENTIALS, PCF_FOUNDATION, true)

                        commonUtil.echoSteps("Auto-scaling Rules Successfully Applied to New Live Application")
                        env.AUTOSCALE_APP = "PASSED"
                    } else {
                        commonUtil.echoSteps("Skipped Autoscale Application")
                    }
                }
            }
        }
        stage('Execute E2E Tests Stage') {
            steps {
                script {
                    currentStage = stages.executeE2ETestsStage
                    if (selectStages(currentStage, startStage, endStage)) {
                        commonUtil.echoSteps("Executing E2E Tests")
//
//                        //TODO: Need to replace with actual E2E Tests once E2E Tests are ready.
//                        if ( selectedEnvironment == "prod-release" || selectedEnvironment == "pre-prod-release" ) {
//                            qaUtil.executeE2ETests(this, PCF_CREDENTIALS, ENTRY_URL, false)
//                        } else {
//                            qaUtil.executeE2ETests(this, PCF_CREDENTIALS, ENTRY_URL)
//                        }

                        commonUtil.echoSteps("E2E Tests Executed Successfully")
                        env.E2E_TESTS = "PASSED"
                    } else {
                        commonUtil.echoSteps("Skipped ExecuteE2eTests")
                    }
                }
            }
        }
        stage('Retrieve Package from Artifactory Pre-prod') {
            steps {
                script {

                    currentStage = stages.retreiveFromArtifactoryPreprod

                    if (selectStages(currentStage, startStage, endStage)) {
                        sh """
                        pwd
                        ls -lra
                        mkdir -p build/libs
                        ls -lra
                        ls -lra build/libs
                    """

                        env.artifactID = "${ArtifactName}"
                        env.artifactDir = "build/libs"
                        env.artifactoryUrl = "https://globalrepository.mclocal.int/artifactory"

                        sh "cat manifest.yml"
                        commonUtil.echoSteps("Renaming AppHostName in manifest.yml")
                        albertaPCFUtil.renameAppInManifest(APP_HOST_NAME)
                        def manifestData = steps.readFile("manifest.yml")
                        writeFile(file: "manifest.yml", text: manifestData.replaceAll(/path:[a-zA-Z0-9. \/-]+/,"path: ${artifactDir}/${artifactId}"))
                        sh "cat manifest.yml"

                        def artifactDownloadSpec = """{
                        "files": [
                            {
                              "pattern": "${artifactPath}${artifactId}",
                              "target": "${artifactDir}/",
                              "flat": "true"
                            }
                        ]
                    }"""

                        commonUtil.echoSteps("Verifying the Variables")
                        echo "Artifact Name: ${artifactId}"
                        echo "Artifact Directory: ${artifactDir}"
                        echo "Artifactory URL: ${artifactoryUrl}"
                        echo "Artifact Location in Artifactory: ${artifactPath}"
                        echo "Download-Spec File: ${artifactDownloadSpec}"

                        commonUtil.echoSteps("Initializing Artifactory Server")
                        def artifactoryServer = Artifactory.newServer( url: "${artifactoryUrl}", credentialsId: ARTIFACTORY_CREDENTIALS )

                        commonUtil.echoSteps("Retrieving artifact from Artifactory")
                        artifactoryServer.download(artifactDownloadSpec)

                        sh """
                        pwd
                        ls -lra
                        ls -lra build/libs
                    """

                        if (! fileExists("${artifactDir}/${artifactId}")) {
                            echo "ERROR: Unable to download Artifact: ${artifactId}"
                            sh "exit 1"
                        }
                        stash includes: '**', name: 'workspace'
                        commonUtil.echoSteps("Artifact Package Retrieved from Artifactory and Verified in the Workspace")
                        env.RETRIEVE_PACKAGE = "PASSED"
                    } else {
                        commonUtil.echoSteps("Skipped Retrieve from Artifactory stage")
                    }
                }
            }
        }
        stage('Deploy Green Pre-prod') {
            agent { label "CF-CLI" }
            steps {
                script {
                    currentStage = stages.deployGreenPreprod
                    if (selectStages(currentStage, startStage, endStage)) {
                        unstash 'workspace'
                        if ( (selectedEnvironment != "prod-release" && selectedEnvironment != "pre-prod-release") ) {
                            commonUtil.echoSteps("Retrieving Artifact from Artifactory")
                            artifactoryUtil.artifactoryDownload(this, ARTIFACTORY_CREDENTIALS)
                            commonUtil.echoSteps("Artifact Package Successfully Retrieved from Artifactory")

                            sh "cat manifest.yml"
                            commonUtil.echoSteps("Renaming AppHostName in manifest.yml")
                            albertaPCFUtil.renameAppInManifest(APP_HOST_NAME)
                            sh "cat manifest.yml"
                        }

                        commonUtil.echoSteps("Started Getting Environment Variables for Synapse")
                        def envVar = org.mastercard.pipeline.utility.SynapseUtil.getEnvVar(this, keyMap, PCF_FOUNDATION, false)
                        commonUtil.echoSteps("Environment Variables for Synapse Successfully Set in map")
                        blueGreenDeployer = new org.mastercard.pipeline.deploy.BlueGreenDeployer(this, PCF_ORG, PCF_DEV_SPACE, PCF_CREDENTIALS, PCF_FOUNDATION)
                        //Pass custom live route to the method, if required. Default will be "green-<APP_NAME>".
                        blueGreenDeployer.deployGreenApp(null, envVar)
                        commonUtil.echoSteps("Green Application Deployed Successfully")
                        env.DEPLOY_GREEN = "PASSED"
                    } else {
                        commonUtil.echoSteps("Skipped Deploy Green")
                    }
                    artifactoryUtil.artifactoryDownload(this, ARTIFACTORY_CREDENTIALS)
                }
            }
        }
        stage('Integration Tests Pre-prod') {
            agent { label "CF-CLI" }
            steps {
                script {
                    currentStage = stages.integrationTestsPreprod
                    if (selectStages(currentStage, startStage, endStage)) {
                        unstash 'workspace'
                        commonUtil.echoSteps("Starting Integration Tests")

                        //TODO: Need to replease with actual Integration Tests once ready to be applicable for all the applications.
                        def appHostName = "${APP_HOST_NAME}"
                        def appHostNameInt = ""

                        if (env.CHANGE_ID) {
                            appHostNameInt = "${appHostName}-${env.CHANGE_ID}"
                        }
                        else {
                            appHostNameInt = "${appHostName}-${env.BUILD_NUMBER}"
                        }

                        if(env.BRANCH_NAME == 'dev') {
                            env.DURABLE_DATA_SERVICE_URL = "https://${appHostName}.apps.stl.pcfstage00.mastercard.int"
                        } else {
                            env.DURABLE_DATA_SERVICE_URL = "https://${appHostNameInt}.apps.stl.pcfstage00.mastercard.int"
                        }

                        echo "Actual Integration Tests needs to be Included."
//                        sh "$GRADLE4/bin/gradle integrationTest"

                        commonUtil.echoSteps("Integration Tests Completed Successfully")
                        env.INTEGRATION_TESTS = "PASSED"
                    } else {
                 commonUtil.echoSteps("Skipped Integration Tests")
                    }
                }
            }
            post {
                always {
                    echo "Junit Report can be captured when Integration Tests are in Place."
                   // junit 'build/test-results/integrationTest/*.xml'
                }
            }
        }
        stage('Flip Traffic Pre-prod') {
            agent { label "CF-CLI" }
            steps {
                script {
                    currentStage = stages.flipTrafficPreprod
                    if (selectStages(currentStage, startStage, endStage)) {
                        commonUtil.echoSteps("Started Flipping Traffic")
                        unstash 'workspace'

                        def map = ['ENABLE_LOCUS_INIT':'true']

                        //Pass custom live route to the method, if required. Default will be "blue-<APP_NAME>"
                        blueGreenDeployer.flipTraffic(null, map)

                        commonUtil.echoSteps("Traffic Successfully Flipped to New Live Application")
                        env.FLIP_TRAFFIC = "PASSED"
                    } else {
                        commonUtil.echoSteps("Skipped Flip Traffic")
                    }
                }
            }
        }
        stage('Autoscale Application Pre-prod') {
            agent { label "CF-CLI" }
            steps {
                script {
                    currentStage = stages.autoscaleApplicationPreprod
                    if (selectStages(currentStage, startStage, endStage)) {
                        unstash 'workspace'

                        albertaPCFUtil.renameAppInManifest(APP_HOST_NAME)
                        autoscaleUtil.autoscaleApplication(PCF_ORG, PCF_DEV_SPACE, PCF_CREDENTIALS, PCF_FOUNDATION, true)

                        commonUtil.echoSteps("Auto-scaling Rules Successfully Applied to New Live Application")
                        env.AUTOSCALE_APP = "PASSED"
                    } else {
                        commonUtil.echoSteps("Skipped Autoscale Application")
                    }
                }
            }
        }
        stage('Execute E2E Tests Pre-prod') {
            steps {
                script {
                    currentStage = stages.executeE2ETestsPreprod
                    if (selectStages(currentStage, startStage, endStage)) {
                        commonUtil.echoSteps("Executing E2E Tests")

//                        //TODO: Need to replace with actual E2E Tests once E2E Tests are ready.
//                        if ( selectedEnvironment == "prod-release" || selectedEnvironment == "pre-prod-release" ) {
//                            qaUtil.executeE2ETests(this, PCF_CREDENTIALS, ENTRY_URL, false)
//                        } else {
//                            qaUtil.executeE2ETests(this, PCF_CREDENTIALS, ENTRY_URL)
//                        }

                        commonUtil.echoSteps("E2E Tests Executed Successfully")
                        env.E2E_TESTS = "PASSED"
                    } else {
                        commonUtil.echoSteps("Skipped ExecuteE2eTests")
                    }
                }
            }
        }
        stage('Retrieve Package from Artifactory Prod') {
            steps {
                script {
                    currentStage = stages.retreiveFromArtifactoryProd
                    if (selectStages(currentStage, startStage, endStage)) {
                        sh """
                        pwd
                        ls -lra
                        mkdir -p build/libs
                        ls -lra
                        ls -lra build/libs
                    """

                        env.artifactID = "${ArtifactName}"
                        env.artifactDir = "build/libs"
                        env.artifactoryUrl = "https://globalrepository.mclocal.int/artifactory"

                        sh "cat manifest.yml"
                        commonUtil.echoSteps("Renaming AppHostName in manifest.yml")
                        albertaPCFUtil.renameAppInManifest(APP_HOST_NAME)
                        def manifestData = steps.readFile("manifest.yml")
                        writeFile(file: "manifest.yml", text: manifestData.replaceAll(/path:[a-zA-Z0-9. \/-]+/,"path: ${artifactDir}/${artifactId}"))
                        sh "cat manifest.yml"

                        def artifactDownloadSpec = """{
                        "files": [
                            {
                              "pattern": "${artifactPath}${artifactId}",
                              "target": "${artifactDir}/",
                              "flat": "true"
                            }
                        ]
                    }"""

                        commonUtil.echoSteps("Verifying the Variables")
                        echo "Artifact Name: ${artifactId}"
                        echo "Artifact Directory: ${artifactDir}"
                        echo "Artifactory URL: ${artifactoryUrl}"
                        echo "Artifact Location in Artifactory: ${artifactPath}"
                        echo "Download-Spec File: ${artifactDownloadSpec}"

                        commonUtil.echoSteps("Initializing Artifactory Server")
                        def artifactoryServer = Artifactory.newServer( url: "${artifactoryUrl}", credentialsId: ARTIFACTORY_CREDENTIALS )

                        commonUtil.echoSteps("Retrieving artifact from Artifactory")
                        artifactoryServer.download(artifactDownloadSpec)

                        sh """
                        pwd
                        ls -lra
                        ls -lra build/libs
                    """

                        if (! fileExists("${artifactDir}/${artifactId}")) {
                            echo "ERROR: Unable to download Artifact: ${artifactId}"
                            sh "exit 1"
                        }
                        stash includes: '**', name: 'workspace'
                        commonUtil.echoSteps("Artifact Package Retrieved from Artifactory and Verified in the Workspace")
                        env.RETRIEVE_PACKAGE = "PASSED"
                    } else {
                        commonUtil.echoSteps("Skipped Retrieve from Artifactory stage")
                    }
                }
            }
        }
        stage('Deploy Green Prod') {
            agent { label "CF-CLI" }
            steps {
                script {
                    currentStage = stages.deployGreenProd
                    if (selectStages(currentStage, startStage, endStage)) {
                        unstash 'workspace'
                        if ( (selectedEnvironment != "prod-release" && selectedEnvironment != "pre-prod-release") ) {
                            commonUtil.echoSteps("Retrieving Artifact from Artifactory")
                            artifactoryUtil.artifactoryDownload(this, ARTIFACTORY_CREDENTIALS)
                            commonUtil.echoSteps("Artifact Package Successfully Retrieved from Artifactory")

                            sh "cat manifest.yml"
                            commonUtil.echoSteps("Renaming AppHostName in manifest.yml")
                            albertaPCFUtil.renameAppInManifest(APP_HOST_NAME)
                            sh "cat manifest.yml"
                        }

                        commonUtil.echoSteps("Started Getting Environment Variables for Synapse")
                        def envVar = org.mastercard.pipeline.utility.SynapseUtil.getEnvVar(this, keyMap, PCF_FOUNDATION, false)
                        commonUtil.echoSteps("Environment Variables for Synapse Successfully Set in map")
                        blueGreenDeployer = new org.mastercard.pipeline.deploy.BlueGreenDeployer(this, PCF_ORG, PCF_DEV_SPACE, PCF_CREDENTIALS, PCF_FOUNDATION)
                        //Pass custom live route to the method, if required. Default will be "green-<APP_NAME>".
                        blueGreenDeployer.deployGreenApp(null, envVar)
                        commonUtil.echoSteps("Green Application Deployed Successfully")
                        env.DEPLOY_GREEN = "PASSED"
                    } else {
                        commonUtil.echoSteps("Skipped Deploy Green")
                    }
                    artifactoryUtil.artifactoryDownload(this, ARTIFACTORY_CREDENTIALS)
                }
            }
        }
        stage('Integration Tests Prod') {
            agent { label "CF-CLI" }
            steps {
                script {
                    currentStage = stages.integrationTestsProd
                    if (selectStages(currentStage, startStage, endStage)) {
//                        unstash 'workspace'
//                        commonUtil.echoSteps("Starting Integration Tests")
//
//                        //TODO: Need to replease with actual Integration Tests once ready to be applicable for all the applications.
//                        def appHostName = "${APP_HOST_NAME}"
//                        def appHostNameInt = ""
//
//                        if (env.CHANGE_ID) {
//                            appHostNameInt = "${appHostName}-${env.CHANGE_ID}"
//                        }
//                        else {
//                            appHostNameInt = "${appHostName}-${env.BUILD_NUMBER}"
//                        }
//
//                        if(env.BRANCH_NAME == 'dev') {
//                            env.DURABLE_DATA_SERVICE_URL = "https://${appHostName}.apps.stl.pcfstage00.mastercard.int"
//                        } else {
//                            env.DURABLE_DATA_SERVICE_URL = "https://${appHostNameInt}.apps.stl.pcfstage00.mastercard.int"
//                        }
//
//                        echo "Actual Integration Tests needs to be Included."
//                        sh "$GRADLE4/bin/gradle integrationTest"

                        commonUtil.echoSteps("Integration Tests Completed Successfully")
                        env.INTEGRATION_TESTS = "PASSED"
                    } else {
                        commonUtil.echoSteps("Skipped Integration Tests")
                    }
                }
            }
            post {
                always {
                    echo "Junit Report can be captured when Integration Tests are in Place."
                  //  junit 'build/test-results/integrationTest/*.xml'
                }
            }
        }
        stage('Flip Traffic Prod') {
            agent { label "CF-CLI" }
            steps {
                script {
                    currentStage = stages.flipTrafficProd
                    if (selectStages(currentStage, startStage, endStage)) {
                        commonUtil.echoSteps("Started Flipping Traffic")
                        unstash 'workspace'

                        def map = ['ENABLE_LOCUS_INIT':'true']

                        //Pass custom live route to the method, if required. Default will be "blue-<APP_NAME>"
                        blueGreenDeployer.flipTraffic(null, map)

                        commonUtil.echoSteps("Traffic Successfully Flipped to New Live Application")
                        env.FLIP_TRAFFIC = "PASSED"
                    } else {
                        commonUtil.echoSteps("Skipped Flip Traffic")
                    }
                }
            }
        }
        stage('Autoscale Application Prod') {
            agent { label "CF-CLI" }
            steps {
                script {
                    currentStage = stages.autoscaleApplicationProd
                    if (selectStages(currentStage, startStage, endStage)) {
                        unstash 'workspace'

                        albertaPCFUtil.renameAppInManifest(APP_HOST_NAME)
                        autoscaleUtil.autoscaleApplication(PCF_ORG, PCF_DEV_SPACE, PCF_CREDENTIALS, PCF_FOUNDATION, true)

                        commonUtil.echoSteps("Auto-scaling Rules Successfully Applied to New Live Application")
                        env.AUTOSCALE_APP = "PASSED"
                    } else {
                        commonUtil.echoSteps("Skipped Autoscale Application")
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                if ( selectedEnvironment == "prod-release" || selectedEnvironment == "pre-prod-release" ) {
                    emailUtil.prepareReleaseEmailNotification(this, STASH_CREDENTIALS, "${selectedEnvironment}", "${currentBuild.currentResult}")
                } else {
                    emailUtil.prepareEmailNotification(this, STASH_CREDENTIALS, "${selectedEnvironment}", "${currentBuild.currentResult}")
                }

                commonUtil.echoSteps("Emptying current workspace directory")
                deleteDir()

                commonUtil.echoSteps("Sending ${currentBuild.currentResult} Notification Email")
                emailext (
                    to: "${env.RECIPIENTS}",
                    subject: "${env.EMAIL_SUBJECT}",
                    body: "${env.EMAIL_BODY}"
                )
            }
        }
        changed {
            script {
                commonUtil.echoSteps("Sending Status Change Notification Email")
                emailext (
                    to: "${env.PR_REVIEWERS}",
                    subject: "BUILD CHANGED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    body: "${env.STATUS_EMAIL_BODY}"
                )
            }
        }
    }
}
